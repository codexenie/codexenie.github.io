<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codeXenie Rule Page</title>
  
  <subtitle>Coding Helper Rule Blog for Visual Studio</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/codexenie/"/>
  <updated>2017-09-07T01:46:58.059Z</updated>
  <id>https://github.com/codexenie/</id>
  
  <author>
    <name>CodeScroll</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DOUBLE_FREE</title>
    <link href="https://github.com/codexenie/DOUBLE_FREE/"/>
    <id>https://github.com/codexenie/DOUBLE_FREE/</id>
    <published>2017-09-07T01:46:58.059Z</published>
    <updated>2017-09-07T01:46:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Double-Free-Prohibit-deallocating-memory-duplication"><a href="#Double-Free-Prohibit-deallocating-memory-duplication" class="headerlink" title="Double_Free Prohibit deallocating memory duplication"></a>Double_Free Prohibit deallocating memory duplication</h2><hr><p>If the deallocated pointer variable is deallocated again, the unexpected memory location can be changed. </p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>If the same pointer variable is deallocated twice, the data structure for controlling the memory can be damaged. Due to this damage, the program can be ended or two times memory allocation can return the same pointer. If the memory allocation returns the same value twice and the attacker can control this memory area, he can attack by buffer overflow. </p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a><strong>example 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>* ptr = (<span class="keyword">char</span>*)<span class="built_in">malloc</span> (SIZE);</div><div class="line">...</div><div class="line"><span class="keyword">if</span> (abrt) &#123;</div><div class="line">    <span class="built_in">free</span>(ptr);</div><div class="line">&#125;</div><div class="line">    ...</div><div class="line"><span class="built_in">free</span>(ptr);</div></pre></td></tr></table></figure><p>Generally, the memory duplication deallocation is occurred by the following two reasons.</p><ul><li>Error condition or exception situation</li><li>Confused situation which part of program is responsible for memory deallocation.</li></ul><p>Several duplication deallocation weaknesses are not more complicated than the example, but in certain case, they can be occurred apart from more than hundreds lines or in the other file. A programmer frequently deallocates the global variable in particular twice.</p><h3 id="Related-Link"><a href="#Related-Link" class="headerlink" title="Related Link"></a>Related Link</h3><ul><li><a href="http://cwe.mitre.org/data/definitions/415.html" target="_blank" rel="external">CWE 415: Double Free</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Double-Free-Prohibit-deallocating-memory-duplication&quot;&gt;&lt;a href=&quot;#Double-Free-Prohibit-deallocating-memory-duplication&quot; class=&quot;headerl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FREE_STACK</title>
    <link href="https://github.com/codexenie/FREE_STACK/"/>
    <id>https://github.com/codexenie/FREE_STACK/</id>
    <published>2017-09-07T01:46:58.059Z</published>
    <updated>2017-09-07T01:46:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Memory-Free-On-Stack-Variable-Prohibit-invalid-size-when-allocating-a-memory-by-malloc"><a href="#Memory-Free-On-Stack-Variable-Prohibit-invalid-size-when-allocating-a-memory-by-malloc" class="headerlink" title="Memory_Free_On_Stack_Variable Prohibit invalid size when allocating a memory by malloc"></a>Memory_Free_On_Stack_Variable Prohibit invalid size when allocating a memory by malloc</h2><hr><p>When allocating a memory by malloc, the size shall be a valid value.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The result of arithmetic operation in program can be bigger than the maximum value of that type or be smaller than the minimum value of that type. If it is used as the size of memory allocation without checking the result value of calculation, it can reference invalid memory.</p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a><strong>example 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">record_t</span> bar[MAX_SIZE];</div><div class="line"></div><div class="line"><span class="comment">/* do something interesting with bar */</span></div><div class="line">...</div><div class="line"><span class="built_in">free</span>(bar);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>In the example, if the size of num_imgs is a big number, it can be a value unexpected by a developer due to overflow.</p><h4 id="alternative-1"><a href="#alternative-1" class="headerlink" title="alternative 1"></a><strong>alternative 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">record_t</span> *bar = (<span class="keyword">record_t</span>*)<span class="built_in">malloc</span>(MAX_SIZE*<span class="keyword">sizeof</span>(<span class="keyword">record_t</span>));</div><div class="line"></div><div class="line"><span class="comment">/* do something interesting with bar */</span></div><div class="line">...</div><div class="line"><span class="built_in">free</span>(bar);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Using the unexpected value shall be prevented by examining the preceding conditions before using it.</p><h3 id="Related-LInk"><a href="#Related-LInk" class="headerlink" title="Related LInk"></a>Related LInk</h3><ul><li><a href="http://cwe.mitre.org/data/definitions/590.html" target="_blank" rel="external">CWE-590: Free of Memory not on the Heap</a></li><li><a href="https://www.securecoding.cert.org/confluence/display/seccode/MEM34-C.+Only+free+memory+allocated+dynamically" target="_blank" rel="external">CERT C MEM34-C. Only free memory allocated dynamically</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Memory-Free-On-Stack-Variable-Prohibit-invalid-size-when-allocating-a-memory-by-malloc&quot;&gt;&lt;a href=&quot;#Memory-Free-On-Stack-Variable-Proh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LACK INIT OBJ</title>
    <link href="https://github.com/codexenie/LACK_INIT_OBJ/"/>
    <id>https://github.com/codexenie/LACK_INIT_OBJ/</id>
    <published>2017-09-07T01:46:58.059Z</published>
    <updated>2017-09-07T01:46:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Copy-all-parts-of-an-object"><a href="#Copy-all-parts-of-an-object" class="headerlink" title="Copy all parts of an object."></a>Copy all parts of an object.</h2><hr><p>You must copy all parts of an object when define copy constructor and copy assignment operator.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Copying functions should be sure to copy all of an object’s data members and all of its base class parts. Most compiler say nothing about partial copy when define copy constructor and copy assignment operator. </p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a><strong>example 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">C(<span class="keyword">const</span> C&amp; c);</div><div class="line">C&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> C&amp; rhs);</div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="keyword">int</span> mem1;</div><div class="line"><span class="keyword">int</span> mem2;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">C::C(<span class="keyword">const</span> C&amp; c):mem1(c.mem1) <span class="comment">/* not compiant; mem2 is not copyed */</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">C&amp; C::<span class="keyword">operator</span>=(<span class="keyword">const</span> C&amp; rhs) <span class="comment">/* not compiant; mem2 is not copyed */</span></div><div class="line">&#123;</div><div class="line">mem1 = rhs.mem1;</div><div class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> C</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">D(<span class="keyword">const</span> D&amp; d);</div><div class="line">D&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> D&amp; rhs);</div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="keyword">char</span> mem;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">D::D(<span class="keyword">const</span> D&amp; d) : C(d), mem(d.mem)</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">D&amp; D::<span class="keyword">operator</span>=(<span class="keyword">const</span> D&amp; rhs)</div><div class="line">&#123;</div><div class="line">C::<span class="keyword">operator</span>=(rhs);</div><div class="line">mem = rhs.mem;</div><div class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Copy constructor and copy assignment operator of class C copy partially member of class C.</p><h4 id="alternative-1"><a href="#alternative-1" class="headerlink" title="alternative 1"></a><strong>alternative 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">C(<span class="keyword">const</span> C&amp; c);</div><div class="line">C&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> C&amp; rhs);</div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="keyword">int</span> mem1;</div><div class="line"><span class="keyword">int</span> mem2;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">C::C(<span class="keyword">const</span> C&amp; c):mem1(c.mem1), mem2(c.mem2) <span class="comment">/* compiant; */</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">C&amp; C::<span class="keyword">operator</span>=(<span class="keyword">const</span> C&amp; rhs) <span class="comment">/* compiant */</span></div><div class="line">&#123;</div><div class="line">mem1 = rhs.mem1;</div><div class="line">mem2 = rhs.mem2;</div><div class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> C</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">D(<span class="keyword">const</span> D&amp; d);</div><div class="line">D&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> D&amp; rhs);</div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="keyword">char</span> mem;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">D::D(<span class="keyword">const</span> D&amp; d) : C(d), mem(d.mem)</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">D&amp; D::<span class="keyword">operator</span>=(<span class="keyword">const</span> D&amp; rhs)</div><div class="line">&#123;</div><div class="line">C::<span class="keyword">operator</span>=(rhs);</div><div class="line">mem = rhs.mem;</div><div class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Copy constructor and copy assignment operator of class C must copy whole member of class C.</p><h3 id="Related-Link"><a href="#Related-Link" class="headerlink" title="Related Link"></a>Related Link</h3><h2 id="“Effective-C-”-Third-Edition-by-Scott-Meyers"><a href="#“Effective-C-”-Third-Edition-by-Scott-Meyers" class="headerlink" title="+ “Effective C++” Third Edition by Scott Meyers."></a>+ <a href="http://aristeia.com/books.html" target="_blank" rel="external">“Effective C++” Third Edition by Scott Meyers.</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Copy-all-parts-of-an-object&quot;&gt;&lt;a href=&quot;#Copy-all-parts-of-an-object&quot; class=&quot;headerlink&quot; title=&quot;Copy all parts of an object.&quot;&gt;&lt;/a&gt;Copy
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SAME TREE</title>
    <link href="https://github.com/codexenie/MIS_BRACE/"/>
    <id>https://github.com/codexenie/MIS_BRACE/</id>
    <published>2017-09-07T01:46:58.059Z</published>
    <updated>2017-09-07T01:46:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Missed-Brace"><a href="#Missed-Brace" class="headerlink" title="Missed Brace"></a>Missed Brace</h2><hr><p>The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>In C++, braces  are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. </p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a><strong>example 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(a &gt; <span class="number">1</span>)</div><div class="line">a++;</div><div class="line">a++; <span class="comment">/* not compliant */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="alternative-1"><a href="#alternative-1" class="headerlink" title="alternative 1"></a><strong>alternative 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(a &gt; <span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">a++;</div><div class="line">a++; <span class="comment">/* compliant */</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Related-Link"><a href="#Related-Link" class="headerlink" title="Related Link"></a>Related Link</h3><ul><li><a href="https://cwe.mitre.org/data/definitions/483.html" target="_blank" rel="external">CWE-483: Incorrect Block Delimitation</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Missed-Brace&quot;&gt;&lt;a href=&quot;#Missed-Brace&quot; class=&quot;headerlink&quot; title=&quot;Missed Brace&quot;&gt;&lt;/a&gt;Missed Brace&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;The code does not explici
      
    
    </summary>
    
    
      <category term="CWE-483" scheme="https://github.com/codexenie/tags/CWE-483/"/>
    
      <category term="Incorrect Block Delimitation." scheme="https://github.com/codexenie/tags/Incorrect-Block-Delimitation/"/>
    
  </entry>
  
  <entry>
    <title>MIS_MATCH_MEM_MAN</title>
    <link href="https://github.com/codexenie/MIS_MATCH_MEM_MAN/"/>
    <id>https://github.com/codexenie/MIS_MATCH_MEM_MAN/</id>
    <published>2017-09-07T01:46:58.059Z</published>
    <updated>2017-09-07T01:46:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mismatched-Memory-Management-Prohibit-allocating-and-deallocating-dynamic-memory-not-consistent-with-each-other"><a href="#Mismatched-Memory-Management-Prohibit-allocating-and-deallocating-dynamic-memory-not-consistent-with-each-other" class="headerlink" title="Mismatched_Memory_Management Prohibit allocating and deallocating dynamic memory not consistent with each other"></a>Mismatched_Memory_Management Prohibit allocating and deallocating dynamic memory not consistent with each other</h2><hr><p>A dynamic memory shall be allocated and deallocated by checking it more clearly than the other component of C/C++ language.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>When deallocating a memory allocated dynamically, using inappropriate deallocation function is an undefined behavior. If the memory is not deallocated correctly, the memory can be damaged or the program can be ended.<br>The memory allocation and deallocation shall be executed in pair as the following table.</p><table><thead><tr><th>allocation</th><th>deallocation</th></tr></thead><tbody><tr><td>allocator<t>::allocate()</t></td><td>allocator<t>::deallocate()</t></td></tr><tr><td>operator new()/new</td><td>operator delete()/delete</td></tr><tr><td>operator new<a href=""></a>/new[]</td><td>operator delete<a href=""></a>/delete[]</td></tr><tr><td>std::malloc(), std::calloc(), std::realloc()</td><td>std::free()</td></tr></tbody></table><h4 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a><strong>example 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">  BarObj *ptr = <span class="keyword">new</span> BarObj()</div><div class="line">  <span class="comment">/* do some work with ptr here */</span></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="built_in">free</span>(ptr);</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="built_in">free</span>(ptr);</div></pre></td></tr></table></figure><p>The pointer allocated as a new shall not be deallocated by a free().</p><h4 id="alternative-1"><a href="#alternative-1" class="headerlink" title="alternative 1"></a><strong>alternative 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">  BarObj *ptr = <span class="keyword">new</span> BarObj()</div><div class="line">  <span class="comment">/* do some work with ptr here */</span></div><div class="line">  ...</div><div class="line"></div><div class="line"><span class="keyword">delete</span> ptr;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>It shall be deallocated correctly by a delete.</p><h4 id="example-2"><a href="#example-2" class="headerlink" title="example 2"></a><strong>example 2</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> *<span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">delete</span> <span class="built_in">array</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The pointer allocated as a new[] shall not be deallocated by a delete.</p><h4 id="alternative-2"><a href="#alternative-2" class="headerlink" title="alternative 2"></a><strong>alternative 2</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> *<span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">delete</span> <span class="built_in">array</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The pointer allocated as a new[] shall be deallocated surely by delete [].</p><h3 id="Related-Link"><a href="#Related-Link" class="headerlink" title="Related Link"></a>Related Link</h3><ul><li><a href="http://cwe.mitre.org/data/definitions/762.html" target="_blank" rel="external">CWE-762: Mismatched Memory Management Routines</a></li><li><a href="https://www.securecoding.cert.org/confluence/display/cplusplus/MEM31-CPP.+Properly+deallocate+dynamically+allocated+resources" target="_blank" rel="external">CERT C++  MEM31-CPP. Properly deallocate dynamically allocated resources</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mismatched-Memory-Management-Prohibit-allocating-and-deallocating-dynamic-memory-not-consistent-with-each-other&quot;&gt;&lt;a href=&quot;#Mismatche
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MIS_OPERATOR</title>
    <link href="https://github.com/codexenie/MIS_OPERATOR/"/>
    <id>https://github.com/codexenie/MIS_OPERATOR/</id>
    <published>2017-09-07T01:46:58.059Z</published>
    <updated>2017-09-07T01:46:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="comparing-instead-of-assigning"><a href="#comparing-instead-of-assigning" class="headerlink" title="comparing instead of assigning"></a>comparing instead of assigning</h2><hr><p>The code uses an operator for comparison when the intention was to perform an assignment. </p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.</p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a><strong>example 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">called</span><span class="params">(<span class="keyword">int</span> foo)</span> </span>&#123;</div><div class="line">    foo==<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (foo==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"foo\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    called(<span class="number">2</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="example-2"><a href="#example-2" class="headerlink" title="example 2"></a><strong>example 2</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 50</span></div><div class="line"><span class="keyword">int</span> *tos, *p1, <span class="built_in">stack</span>[SIZE];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    p1++;</div><div class="line">    <span class="keyword">if</span>(p1==(tos+SIZE)) &#123;</div><div class="line">    <span class="comment">// Print stack overflow error message and exit</span></div><div class="line">    &#125;</div><div class="line">    *p1 == i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(p1==tos) &#123;</div><div class="line">    <span class="comment">// Print stack underflow error message and exit</span></div><div class="line">    &#125;</div><div class="line">    p1--;</div><div class="line">    <span class="keyword">return</span> *(p1+<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="comment">// initialize tos and p1 to point to the top of stack</span></div><div class="line">    tos = <span class="built_in">stack</span>;</div><div class="line">    p1 = <span class="built_in">stack</span>;</div><div class="line">    <span class="comment">// code to add and remove items from stack</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The push method includes an expression to assign the integer value to the location in the stack pointed to by the pointer variable.<br>However, this expression uses the comparison operator “==” rather than the assignment operator “=”. The result of using the comparison operator instead of the assignment operator causes erroneous values to be entered into the stack and can cause unexpected results.</p><h3 id="Related-Link"><a href="#Related-Link" class="headerlink" title="Related Link"></a>Related Link</h3><ul><li><a href="https://cwe.mitre.org/data/definitions/482.html" target="_blank" rel="external">CWE 482: Comparing instead of Assigning</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;comparing-instead-of-assigning&quot;&gt;&lt;a href=&quot;#comparing-instead-of-assigning&quot; class=&quot;headerlink&quot; title=&quot;comparing instead of assigning&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RETURN REFERENCE</title>
    <link href="https://github.com/codexenie/RETURN-REFERENCE/"/>
    <id>https://github.com/codexenie/RETURN-REFERENCE/</id>
    <published>2017-09-07T01:46:58.059Z</published>
    <updated>2017-09-07T01:46:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="don’t-try-to-return-a-reference-when-you-must-return-an-object"><a href="#don’t-try-to-return-a-reference-when-you-must-return-an-object" class="headerlink" title="don’t try to return a reference when you must return an object."></a>don’t try to return a reference when you must return an object.</h2><hr><p>Never return a pointer or reference in function. </p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Never return a pointer or reference to a local stack object, a reference to a heap-allocated object, or a pointer or reference to a local static object. If return heap-based objects it is possible to occur memory leak. And local static object are destroyed ath the exit of function. It is not valid on out of function scope. </p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a><strong>example 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="title">func1</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span>* ch = <span class="keyword">new</span> <span class="keyword">char</span>();</div><div class="line"></div><div class="line"><span class="keyword">return</span> *ch; <span class="comment">/* not compiant */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="title">func2</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span>* ch = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (ch != <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> *ch;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> *ch; <span class="comment">/* not compiant */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="alternative-1"><a href="#alternative-1" class="headerlink" title="alternative 1"></a><strong>alternative 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> <span class="title">func1</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span>* ch = <span class="keyword">new</span> <span class="keyword">char</span>();</div><div class="line"></div><div class="line"><span class="keyword">return</span> ch; <span class="comment">/* compiant */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> <span class="title">func2</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span> ch = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (ch != <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> ch;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> *ch; <span class="comment">/* compiant */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Related-Link"><a href="#Related-Link" class="headerlink" title="Related Link"></a>Related Link</h3><ul><li><a href="http://aristeia.com/books.html" target="_blank" rel="external">“Effective C++” Third Edition by Scott Meyers.</a> </li><li><a href="https://cwe.mitre.org/data/definitions/562.html" target="_blank" rel="external">CWE-562: Return of Stack Variable Address</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;don’t-try-to-return-a-reference-when-you-must-return-an-object&quot;&gt;&lt;a href=&quot;#don’t-try-to-return-a-reference-when-you-must-return-an-ob
      
    
    </summary>
    
    
      <category term="Effective C++ item 14" scheme="https://github.com/codexenie/tags/Effective-C-item-14/"/>
    
      <category term="don&#39;t try to return a reference when you must return an object." scheme="https://github.com/codexenie/tags/don-t-try-to-return-a-reference-when-you-must-return-an-object/"/>
    
  </entry>
  
  <entry>
    <title>REDUNDANT_COND</title>
    <link href="https://github.com/codexenie/REDUNDANT_COND/"/>
    <id>https://github.com/codexenie/REDUNDANT_COND/</id>
    <published>2017-09-07T01:46:58.059Z</published>
    <updated>2017-09-07T01:46:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redundant-Condition-Prohibit-using-a-conditional-expression-having-the-same-result-at-all-times"><a href="#Redundant-Condition-Prohibit-using-a-conditional-expression-having-the-same-result-at-all-times" class="headerlink" title="Redundant_Condition Prohibit using a conditional expression having the same result at all times"></a>Redundant_Condition Prohibit using a conditional expression having the same result at all times</h2><hr><p>There are conditional expressions which the result is always a true or false in the program.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>In the program, the conditional expression having always true or false results can be a logic error. This error leads to an unachievable code.</p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a><strong>example 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">uint16_t</span>  bad_1307_var1;</div><div class="line"><span class="keyword">int8_t</span>    bad_1307_var2;</div><div class="line"></div><div class="line"><span class="comment">/* Always false */</span></div><div class="line"><span class="keyword">if</span> ( bad_1307_var1 &lt; <span class="number">0U</span> )      <span class="comment">/* Not compliant */</span>   </div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">/* Always true */</span></div><div class="line"><span class="keyword">if</span> ( bad_1307_var1 &lt;= <span class="number">0xffff</span>U )   <span class="comment">/* Not compliant */</span></div><div class="line">...</div><div class="line">     </div><div class="line"><span class="comment">/* Always true */</span></div><div class="line"><span class="keyword">if</span> ( bad_1307_var2 &lt; <span class="number">130</span> )   <span class="comment">/* Not compliant */</span> </div><div class="line">...</div></pre></td></tr></table></figure><p>The example is the conditional expression having always true of false results.</p><h4 id="alternative-1"><a href="#alternative-1" class="headerlink" title="alternative 1"></a><strong>alternative 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">uint16_t</span>  good_1307_var1;</div><div class="line"><span class="keyword">int8_t</span>    good_1307_var2;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( good_1307_var1 &gt; <span class="number">0U</span> )        <span class="comment">/* Compliant */</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( good_1307_var1 &lt; <span class="number">0xffff</span>U )    <span class="comment">/* Compliant */</span></div><div class="line">...</div><div class="line">     </div><div class="line"><span class="keyword">if</span> ( good_1307_var2 &lt; <span class="number">120</span> )       <span class="comment">/* Compliant */</span> </div><div class="line">...</div></pre></td></tr></table></figure><p>If the correct conditional expression is used, the logic error can be removed.</p><h3 id="Related-Link"><a href="#Related-Link" class="headerlink" title="Related Link"></a>Related Link</h3><ul><li><a href="https://cwe.mitre.org/data/definitions/570.html" target="_blank" rel="external">CWE-570: Expression is Always False</a></li><li><a href="https://cwe.mitre.org/data/definitions/571.html" target="_blank" rel="external">CWE-571: Expression is Always True</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redundant-Condition-Prohibit-using-a-conditional-expression-having-the-same-result-at-all-times&quot;&gt;&lt;a href=&quot;#Redundant-Condition-Prohi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SAME TREE</title>
    <link href="https://github.com/codexenie/SAME_TREE/"/>
    <id>https://github.com/codexenie/SAME_TREE/</id>
    <published>2017-09-07T01:46:58.059Z</published>
    <updated>2017-09-07T01:46:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Never-redefine-an-inherited-non-virtual-function"><a href="#Never-redefine-an-inherited-non-virtual-function" class="headerlink" title="Never redefine an inherited non-virtual function."></a>Never redefine an inherited non-virtual function.</h2><hr><p>Non-virtual functions are statically bound.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Non-virtual functions are statically bound. It should have the same behavior no matter whether you call the derived function from a pointer to base class or from a pointer to derived class. Otherwise it is not is-a inheritance. </p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a><strong>example 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>; <span class="comment">/* not compliant */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">A* x = <span class="keyword">new</span> B();</div><div class="line">x-&gt;call(); </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="alternative-1"><a href="#alternative-1" class="headerlink" title="alternative 1"></a><strong>alternative 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>; <span class="comment">/* compliant */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">A* x = <span class="keyword">new</span> B();</div><div class="line">x-&gt;call(); </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Related-Link"><a href="#Related-Link" class="headerlink" title="Related Link"></a>Related Link</h3><ul><li><a href="http://aristeia.com/books.html" target="_blank" rel="external">“Effective C++” Third Edition by Scott Meyers.</a> </li><li><a href="https://www.securecoding.cert.org/confluence/display/cplusplus/OOP02-CPP.+Do+not+hide+inherited+non-virtual+member+functions" target="_blank" rel="external">CERT C++  OOP02-CPP. Do not hide inherited non-virtual member functions</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Never-redefine-an-inherited-non-virtual-function&quot;&gt;&lt;a href=&quot;#Never-redefine-an-inherited-non-virtual-function&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="Effective C++ item 36" scheme="https://github.com/codexenie/tags/Effective-C-item-36/"/>
    
      <category term="Never redefine an inherited non-virtual function." scheme="https://github.com/codexenie/tags/Never-redefine-an-inherited-non-virtual-function/"/>
    
  </entry>
  
  <entry>
    <title>VIRTUAL DESTRUCTOR</title>
    <link href="https://github.com/codexenie/VIRTUAL_DESTRUCTOR/"/>
    <id>https://github.com/codexenie/VIRTUAL_DESTRUCTOR/</id>
    <published>2017-09-07T01:46:58.059Z</published>
    <updated>2017-09-07T01:46:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Declare-destructors-virtual-in-polymorphic-base-classess"><a href="#Declare-destructors-virtual-in-polymorphic-base-classess" class="headerlink" title="Declare destructors virtual in polymorphic base classess."></a>Declare destructors virtual in polymorphic base classess.</h2><hr><p>If base class with a non-virtual destructor, it occured undefined behavior.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>If delete base class pointer with non-virtual destructor, it happens at runtime is that the derived part of the object is never destroyed. So polymorphic base classes should declare virtual desturctors. If a class has any virtual functions, it should have a virtual destructor. Classes not designed to be base classes or not designed to be used polymorphically should not declare virtual destructors.</p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a><strong>example 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">A();</div><div class="line">~A(); <span class="comment">/* not compliant; destructor is not virtual */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line">~B()</div><div class="line">&#123;</div><div class="line">mem = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="keyword">int</span> mem;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">A* a = <span class="keyword">new</span> B();</div><div class="line"><span class="keyword">delete</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>If delete A class pointer, it happens at runtime is that destructor of B didn’t called.</p><h4 id="alternative-1"><a href="#alternative-1" class="headerlink" title="alternative 1"></a><strong>alternative 1</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">A();</div><div class="line"><span class="keyword">virtual</span> ~A(); <span class="comment">/* compliant; */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</div><div class="line">&#123;</div><div class="line">~B()</div><div class="line">&#123;</div><div class="line">mem = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="keyword">int</span> mem;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">A* a = <span class="keyword">new</span> B();</div><div class="line"><span class="keyword">delete</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Destructor of A must be virtual.</p><h3 id="Related-Link"><a href="#Related-Link" class="headerlink" title="Related Link"></a>Related Link</h3><ul><li><a href="http://aristeia.com/books.html" target="_blank" rel="external">“Effective C++” Third Edition by Scott Meyers.</a> </li><li><a href="https://www.securecoding.cert.org/confluence/display/cplusplus/OOP52-CPP.+Do+not+delete+a+polymorphic+object+without+a+virtual+destructor" target="_blank" rel="external">CERT C++  OOP52-CPP. Do not delete a polymorphic object without a virtual destructor</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Declare-destructors-virtual-in-polymorphic-base-classess&quot;&gt;&lt;a href=&quot;#Declare-destructors-virtual-in-polymorphic-base-classess&quot; class=
      
    
    </summary>
    
    
  </entry>
  
</feed>
